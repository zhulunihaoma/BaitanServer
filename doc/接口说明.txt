接口说明

///////////////////////////////////

接口Host：
本地局域网：http://192.168.1.105:8885/
公网：http://pb18457555.imwork.net/

接口返回数据result：
int code; //请求返回结果 0：成功 1：失败
String msg; //请求返回信息，类似 "successs" "fail" "失败原因..."
var data; //请求返回具体data
实例： {code: 0, msg: "sucess", data: "http://192.168.1.105:8885/upload/"}

小程序请求实例：
wx.request({
      url: ,//接口URL
      method: ,//请求方法 'GET','POST'
      data: {
        //请求参数
      },
      header: { "content-type": "application/x-www-form-urlencoded" },  //全部请求都要使用这种内容类型
      header: {'content-type': 'application/json'}, //这是默认内容类型,不要使用，后台接收不到参数
      success: function (res) {
        //返回结果
      }
    })

///////////////////////////////////

上传图片接口：
url："/picupload"
result: 图片名称

请求实例：
wx.uploadFile({
      url: 'http://192.168.1.105:8885/picupload',
      filePath: filePath[0], //图片文件，参考小程序API  wx.chooseImage获取
      name: 'file',          //文件KEY，后台取文件用； 必须使用 'file'
      formData: {
                             //其他附带上传的参数，可不写
      },
      success: function (res) {
        console.log(res.data.data)； //返回图片name
                                     //res.data 为封装的result格式
                                     //res.data.data 为具体的图片名
      }
    })

获取图片路径接口：
url: "/picpath"
result：图片路径  http://192.168.1.105:8885/upload/  或者 http://pb18457555.imwork.net/upload/

备注：路径可以直接写死也可以调接口读取，预先写个图片路径的接口，以防止后期变更太过于频繁； 图片读取格式 picPath+picName

实例：
wx.request({
     url: 'http://192.168.1.105:8885/picpath',
     data: {
     },
     header: { "content-type": "application/x-www-form-urlencoded" },
     success: function (res) {
       console.log(res.data.data)
     }
   })


///////////////////////////////////
店铺管理

///////////////
店铺实体类：
shop:{
   int clientId: ,            //当前用户ID，建议使用微信授权读取用户的 OpenId
   String name:,              //店铺名称
   String introduction: ,     //店铺简介
   String contacts: ,         //店铺联系人名称
   int sex: ,                 //店铺联系人性别 0:男士 1:女士
   String phone: ,            //联系电话
   String address: ,          //店铺地址
   String picUrl1: ,          //轮播图1文件名
   String picUrl2: ,          //轮播图2文件名
   String picUrl3: ,          //轮播图3文件名
   int state: ,               //店铺状态 1:营业  0;歇业
}

///////////////
新增店铺接口：
url："/shopmanage/submitshop"
method：POST
data: 店铺实体类shop
result

实例：
wx.request({
      url: 'http://192.168.1.105:8885/shopmanage/submitshop',
      method: 'POST',
      data: {
        clientId: '00001',
        name: '烘焙店',
        introduction: '一家牛逼的蛋糕烘焙店',
        contacts: 'Mr xie',
        sex: 0,
        phone: '18705155605',
        address: '小行地铁站',
        picUrl1: 'xxxxxxxxxxxxxxx',
        picUrl2: 'xxxxxxxxxxxxxxx',
        picUrl3: 'xxxxxxxxxxxxxxx',
      },
      header: { "content-type": "application/x-www-form-urlencoded" },
      success: function (res) {
        console.log(res.data)
      }
    })


获取店铺信息接口：
url："/shopmanage/getshop"
method：GET
data: int clientId            //当前用户ID，建议使用微信授权读取用户的 OpenId
result：shop实体类

实例：
wx.request({
      url: 'http://192.168.1.105:8885/shopmanage/getshop',
      data: {
        clientId: '00001'
      },
      header: { "content-type": "application/x-www-form-urlencoded" },
      success: function (res) {
        console.log(res.data)
      }
    })


修改店铺信息接口：
url："/shopmanage/editshop"
method：POST
data: 店铺实体类shop
result

实例：
wx.request({
      url: 'http://192.168.1.105:8885/shopmanage/editshop',
      method: 'POST',
      data: {
        clientId: '00001',
        name: '烘焙店',
        introduction: '一家牛逼的蛋糕烘焙店',
        contacts: 'Mr xie',
        sex: 0,
        phone: '18705155605',
        address: '小行地铁站',
        picUrl1: 'xxxxxxxxxxxxxxx',
        picUrl2: 'xxxxxxxxxxxxxxx',
        picUrl3: 'xxxxxxxxxxxxxxx',
      },
      header: { "content-type": "application/x-www-form-urlencoded" },
      success: function (res) {
        console.log(res.data)
      }
    })



删除店铺接口：
url："/shopmanage/deleteshop"
method：GET
data: id  //店铺ID
result

实例：
wx.request({
      url: 'http://192.168.1.105:8885/shopmanage/deleteshop',
      method: 'GET',
      data: {
        id: 5
      },
      header: { "content-type": "application/x-www-form-urlencoded" },
      success: function (res) {
        console.log(res.data)
      }
    })


更新店铺营业状态接口：
url："/shopmanage/updateshopstate"
method：GET
data: {
      int shopId        //店铺id
      int state         //店铺状态  1:营业  0;歇业
}
result

///////////////////////////////////
///////////////////////////////////
商品实体管理

///////////////
商品实体类：
Commodity:{
   int id: ,                  //商品ID，唯一标识,数据库自动生成
   int shopId: ,              //商品所在店铺ID
   String name:,              //商品名
   String introduction: ,     //商品描述
   float price: ,             //商品单价
   int monthlySales: ,        //月销售数目
   String praise: ,           //好评率
   String pictUrl: ,          //商品图片
   boolean state: ,           //上下架状态 上架（true） 下架（false）
}

///////////////
获取店铺中所有商品列表接口，上下架管理界面：
url："/commoditymanage/getallcolist"
method：GET
data:{
    int shopId        //店铺ID
    int page          //请求页码，从0开始
    int size          //请求每页数据的个数
}

result;{
    content: List<Commodity>   //请求数据的所在字段
    size                       //每页个数
    totalElements              //总个数
    totalPages                 //总页数
}


获取店铺已上架商品列表接口，店铺首页显示：
url："/commoditymanage/getcolist"
method：GET
data:{
    int shopId        //店铺ID
    int page          //请求页码，从0开始
    int size          //请求每页数据的个数
}

result;{
    content: List<Commodity>   //请求数据的所在字段
    size                       //每页个数
    totalElements              //总个数
    totalPages                 //总页数
}


获取单个商品的详情数据接口：
url："/commoditymanage/getcommodity"
method：GET
data: int commodityId        //商品ID
result: Commodity


新增商品接口：
url："/commoditymanage/addcommodity"
method：POST
data: Commodity实体类
result:


修改商品接口：
url："/commoditymanage/editcommodity"
method：POST
data: Commodity实体类
result:


删除商品接口：
url："/commoditymanage/deletecommodity"
method：GET
data: int commodityId        //商品ID
result:


修改商品上下架状态接口：
url："/commoditymanage/updatecostate"
method：GET
data: int commodityId        //商品ID
result:

///////////////////////////////////
///////////////////////////////////
收货地址管理

///////////////
收货地址实体类：
ReceiverAddress:{
   int id: ,                  //收货地址ID，唯一标识,数据库自动生成
   String clientId: ,         //用户ID
   String name:,              //联系人姓名
   int sex: ,                 //联系人性别 0:男士 1:女士
   String address: ,          //送餐地址
   String phone: ,            //联系人电话
   boolean isDefault: ,       //是否默认地址
}

///////////////
获取用户所有收货地址列表：
url："/profilemanage/getaddresslist"
method：GET
data: String clientId        //用户ID
result： List<ReceiverAddress>


获取单个收货地址数据：
url："/profilemanage/getaddress"
method：GET
data: int addressId        //收货地址ID
result: ReceiverAddress


新增收货地址接口：
url："/profilemanage/addaddress"
method：POST
data: ReceiverAddress实体类
result:


修改收货地址接口：
url："/profilemanage/editaddress"
method：POST
data: ReceiverAddress实体类
result:


删除收货地址：
url："/profilemanage/deleteaddress"
method：GET
data: int addressId        //收货地址ID
result:


修改收货地址默认状态：
url："/profilemanage/updatadstate"
method：GET
data: {
        int addressId          //收货地址ID
        String clientId        //用户ID
      }
result:


获取默认收货地址：
url："/profilemanage/getdefaultaddress"
method：GET
data: {
        String clientId        //用户ID
      }
result:  ReceiverAddress

///////////////////////////////////
///////////////////////////////////
店铺销售统计数据实体类：
ShopStatistics:{
   int shopId: ,               //店铺ID
   float todaySales: ,         //今日营业额
   float totalSales:,          //总营业额
   int receivedOrder: ,        //已接订单数
}


店铺管理页面获取店铺销售统计数据接口：
url："/profilemanage/getstatistics"
method：GET
data: int shopId        //店铺ID
result:  ShopStatistics实体类


///////////////////////////////////
///////////////////////////////////
订单功能

订单实体类：
Order: {
    String orderId;         //订单编号 （前端下单时不用提交，后台随机生成唯一标识）
    String clientId;        //用户Id
    int receiverAddressId;  //收货地址Id
    int shopId;             //店铺Id
    Date date;              //下单时间  (前端下单时不用提交，后台生成)
    Date arriveDate;        //用户要求送达时间 (非必要)
    String remarks;         //订单备注
    float totalMoney;       //订单总金额  (前端展示时可自己计算，下单时不必提交，后台计算金额值)
    int state;              //订单状态 0：待支付; 1：待送达; 2：已完成  (下单时不必提交)

    List<OrderCommodity> OrderCoList;       //订单中商品详情，封装订单中的商品和数量  特殊字段，下单时不用处理
    ReceiverAddress address:                //订单中收货地址实体类，获取店铺订单时封装数据进去
}

订单中商品详情实体类： (基本以数组形式操作)
 OrderCommodity：{
     int commodityId;        //商品Id
     String commodityName;   //商品名 （入参时不需要赋值，只在出参时使用）
     int count;              //商品个数

     //出参时才有值，在获取店铺订单列表（按商品分类）时，订单详情中展示
     Order order;            //订单实体类
     String ClientName;      //订单中收货人名字
     String orderRemarks;    //订单备注
 }

 订单按商品分类所展示的实体类：
 CommodityOrder：{
     int commodityId;        //商品Id
     Commodity commodity;    //商品实体类
     int totalNum;           //该商品在所有已接订单中的总数

     //在获取店铺订单列表（按商品分类）时，订单详情中展示
     List<OrderCommodity> orderCommodityList;            //商品所在所有的已接订单列表
 }

 店铺历史订单实体类：
 HistoryOrder：{
     int id;                    //自动生成ID
     String historyDate;        //历史日期  "yyyy-MM-dd"
     List<Order> orderList;     //订单列表
 }


///////////////
用户下单接口：
url："/ordermanage/submit"
method：POST
data: {
     clientId: ,                        //用户Id
     receiverAddressId:,                //收货地址Id
     shopId:,                           //店铺Id
     arriveDate: ,                      //用户要求送达时间 (非必要)
     remarks:,                          //订单备注
     orderCoListStr:                    //订单中的商品详情 （见下文）
}
result: String orderId 生成的订单编号

orderCoListStr字段说明：
订单中商品的个数详情，数组
orderCoList:[
      { commodityId: 1, count: 2},
      { commodityId: 3, count: 1 },
      { commodityId: 4, count: 4 },
]
orderCoListStr = JSON.stringify(that.data.orderCoList); //需要转化成字符串提交服务器

接口实例：
 var orderCoListStr = JSON.stringify(that.data.orderCoList);
    wx.request({
      url: 'http://192.168.1.105:8885/ordermanage/submit',
      method: 'POST',
      data: {
       clientId: '222',
       receiverAddressId:3,
       shopId: 16,
       remarks: 'xxxxxxxxxxxxxxxx',
       orderCoListStr: orderCoListStr
      },
      header: { "content-type": "application/x-www-form-urlencoded" },
      success: function (res) {
        console.log(res.data)
      }
    })

///////////////
单个订单详情获取接口：
url："/ordermanage/getorder"
method：GET
data: String orderId        //订单编号
result:  Order订单实体类

更新订单状态接口：
url："/ordermanage/updateorderstate"
method：GET
data: String orderId        //订单编号
      int state             //订单状态 0：待支付; 1：待送达; 2：已完成
result:


用户端订单列表获取接口：
url："/ordermanage/getclientorders"
method：GET
data: {
      String clientId        //用户ID
      int page               //请求页码，从0开始
      int size               //请求每页数据的个数
}
result;{
    content:List<Order>订单实体类List    //请求数据的所在字段
    size                                //每页个数
    totalElements                       //总个数
    totalPages                          //总页数
}


店铺端已接订单列表获取接口（按订单分类）：
url："/ordermanage/getshoporders"
method：GET
data: {
      int shopId             //店铺ID
      int page               //请求页码，从0开始
      int size               //请求每页数据的个数
}
result;{
    content:List<Order>订单实体类List    //请求数据的所在字段
    size                                //每页个数
    totalElements                       //总个数
    totalPages                          //总页数
}


店铺端已接订单列表获取接口（按商品分类）：
url："/ordermanage/getshoporders2"
method：GET
data: {
      int shopId             //店铺ID
}
result; List<CommodityOrder>


店铺端已接订单列表获取接口（按商品分类）：
url："/ordermanage/gethistoryorders"
method：GET
data: {
      int shopId             //店铺ID
      int page               //请求页码，从0开始
      int size               //请求每页数据的个数
}
result; List<HistoryOrder>   //历史订单实体列表，结构见上文


